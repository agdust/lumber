module            =  { SOI ~ (directive | clause)* ~ EOI }
external_handle   =  { SOI ~ atom ~ ("::" ~ atom)* ~ arity ~ EOI }
question          =  { SOI ~ body ~ EOI }

directive         =  { ":-" ~ instruction ~ "." }
instruction       =  { nat | mod_ | use_ | pub_ | mut_ | inc }
nat               =  { "nat" ~ "(" ~ handle ~ ")" }
mod_              =  { "mod" ~ "(" ~ atom ~ ")" }
use_              =  { "use" ~ "(" ~ multi_handle ~ ")" }
pub_              =  { "pub" ~ "(" ~ handle ~ ")" }
mut_              =  { "mut" ~ "(" ~ handle ~ ")" }
inc               =  { "inc" ~ "(" ~ handle ~ ")" }

multi_handle      =  { module_path ~ ("(" ~ handles ~ ","? ~ ")")? }
module_path       =  { scope | scope_prefix }

scope_prefix      =  { (up ~ ("::" ~ up)* | root | lib)  }
    up            =  { "^" }
    root          =  { "~" }
    lib           = ${ "@" ~ atom }

scope             =  { (scope_prefix ~ "::")? ~ atom ~ ("::" ~ atom)* }

handles           =  { (handle | alias) ~ ("," ~ (handle | alias))* }
alias             =  { "alias" ~ "(" ~ handle ~ "," ~ "as" ~ ":" ~ handle ~ ")" }
handle            =  { atom ~ arity }
arity             =  { "/" ~ integer_10 ~ (":" ~ atom ~ ("/" ~ !"0" ~ !"1" ~ integer_10)?)* }

clause            =  { fact | rule | function }
fact              =  { head ~ "." }
rule              =  { head ~ (rule_once | rule_multi) ~ body ~ "." }
rule_multi        =  { ":-" }
rule_once         =  { "::-" }
function          =  { function_head ~ (function_once | function_multi) ~ evaluation ~ "." }
function_multi    =  { "<-" }
function_once     =  { "<<-" }

head              =  { atom ~ ( "(" ~ params ~ ","? ~ ")" )? }
function_head     =  { atom ~ "!" ~ ( "(" ~ params ~ ","?  ~ ")" )? }
body              =  { disjunction }
evaluation        =  { (assumption ~ ",")* ~ operation }

disjunction       =  { branch ~ (";" ~ branch)* }
branch            =  { conjunction ~ ("->>" ~ conjunction)? }
conjunction       =  { procession ~ ("," ~ procession)* }
procession        =  { unification ~ ("->" ~ unification)* }
unification       =  { assumption | predicate | "(" ~ disjunction ~ ")" }
assumption        =  { pattern ~ "<-" ~ operation }
expression        =  { value | aggregation | "(" ~ operation ~ ")" }
operation         =  { expression ~ (operator ~ expression)* }
aggregation       =  { set_aggregation | list_aggregation }
set_aggregation   =  { "{" ~ aggregation_body ~ "}" }
list_aggregation  =  { "[" ~ aggregation_body ~ "]" }
aggregation_body  =  { pattern ~ ":" ~ disjunction }

call              =  { scope ~ "!" ~ ( "(" ~ params ~ ","? ~ ")" )? }
predicate         =  { scope ~ ( "(" ~ params ~ ","? ~ ")" )? }
struct_           =  { atom ~ ( "(" ~ pattern ~ ")" | list | record | set)? }

params            =  { named_params | bare_params ~ ("," ~ named_params)? }
named_params      =  { named_param ~ ("," ~ named_param)* }
named_param       =  { atom ~ ":" ~ bare_params }
bare_params       =  { pattern ~ (!("," ~ pattern ~ ":") ~ "," ~ pattern)* }

atom              =  { bare_atom | quoted_atom }
bare_atom         = @{ &XID_START ~ (LOWERCASE_LETTER | OTHER_LETTER) ~ XID_CONTINUE* }
quoted_atom       = @{ PUSH("#"*) ~ "'" ~ (!("'" ~ PEEK) ~ ANY)+ ~ "'" ~ POP }

operator          =  { named_operator | symbolic_operator }
named_operator    = ${ "`" ~ scope ~ "`" }
symbolic_operator = ${ !"->" ~ !"<-" ~ !"!" ~ !"?" ~ (operator_symbol+) }
operator_symbol   =  { "-" | "+" | "*" | "/" | "%" | "<" | ">" | "=" | "?" | "$" | "!" | "^" | "&" | "|" | "@" | "#" | "\\" }

variable          = @{ &XID_START ~ (UPPERCASE_LETTER | TITLECASE_LETTER) ~ XID_CONTINUE* }
wildcard          = @{ "_" ~ XID_CONTINUE* }

value             =  { call | variable | value_pattern }
pattern           =  { bound_pattern | unbound_pattern | bindable_pattern | value_pattern }
unbound_pattern   =  { "?" ~ (bindable_pattern | value_pattern)? }
bound_pattern     =  { "!" ~ (bindable_pattern | value_pattern)? }
bindable_pattern  =  { variable | wildcard }
value_pattern     =  { literal | struct_ | list | record | set }

literal           =  { decimal | integer | string }

integer           =  { integer_2 | integer_16 | integer_10 }
integer_10        = @{ ASCII_NONZERO_DIGIT ~ (ASCII_DIGIT)* | "0" }
integer_2         = @{ "0b" ~ ASCII_BIN_DIGIT+ }
integer_16        = @{ "0x" ~ ASCII_HEX_DIGIT+ }

decimal           =  { decimal_10 }
decimal_10        = ${ integer_10 ~ "." ~ integer_10 }

string            = @{ PUSH("#"*) ~ "\"" ~ (!("\"" ~ PEEK) ~ ANY)* ~ "\"" ~ POP }

list              =  { "[" ~ list_entries ~ (list_tail | ",")? ~ "]" | "[" ~ "]" }
list_tail         =  { "," ~ ".." ~ (list | variable | wildcard)? }
set               =  { "{" ~ list_entries ~ (set_tail | ",")? ~ "}" | "{" ~ "}" }
set_tail          =  { "," ~ ".." ~ (set | variable | wildcard)? }
list_entries      =  { pattern ~ ("," ~ pattern)* }
record            =  { "{" ~ fields ~ (record_tail | ",")? ~ "}" | "{" ~ ":" ~ "}" }
fields            =  { field ~ ("," ~ field)* }
field             =  { atom ~ ":" ~ pattern }
record_tail       =  { "," ~ ".." ~ (record | variable | wildcard)? }

WHITESPACE        = _{ " " | "\t" | NEWLINE }
COMMENT           = _{ line_comment | block_comment }
line_comment      = _{ "//" ~ (!"\n" ~ ANY)* ~ NEWLINE }
block_comment     = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }
